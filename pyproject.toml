[tool.poetry]
name = "python-package-publish"
version = "0.1.2"
description = "A common shared library to demonstrate python package publishing"
authors = ["Kyle Harrison <kyle.harrison.dev@gmail.com>"]
packages = [{ include = "python_package_publish" }]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/apoclyps/python-package-publish"
repository = "https://github.com/apoclyps/python-package-publish"
keywords = ["packaging", "dependency", "poetry"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
include = ["LICENSE.md"]

[tool.poetry.dependencies]
python = "^3.11"
poetry = "^1.6.1"

[tool.poetry.group.dev.dependencies]
codespell = "2.2.5"
mypy = "1.5.1"
pre-commit = "2.20.0"
pytest = "7.4.2"
pytest-cov = "4.1.0"
ruff = "0.0.291"
tox = "4.11.3"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
ignore_missing_imports = true
pretty = true
disallow_untyped_defs = true

[tool.pytest.ini_options]
addopts = "-vvv -s"
testpaths = ["src", "tests"]

[tool.codespell]
builtin = "clear,rare,informal,code,names"
check-filenames = ""
check-hidden = ""
enable-colors = ""
ignore-words-list = "som,iam,jupyter,ot,fo,te,toos,ue,thead,mke,ths"
quiet-level = 2
skip = "poetry.lock,.mypy_cache,.git,.ruff_cache,.coverage,menu.json,.venv,.idea,.htmlcov"

[tool.ruff]
cache-dir = ".cache/ruff"
fix = true

[tool.commitizen]
version = "0.1.2"  # This should be your current semver version

# ruff linting rules are listed within: https://beta.ruff.rs/docs/rules
select = [
    "ARG",  # flake8-unused-arguments
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "C90",  # mccabe-complexity
    "E",    # pycodestyle-errors
    "ERA",  # eradicate
    "EXE",  # flake8-executable
    "F",    # pyflakes
    "FA",   # flake8-future-annotations
    "I",    # isort
    "ICN",  # flake8-import-conventions
    "INP",  # flake78-no-pep420
    "INT",  # flake8-gettext
    "ISC",  # flake8-implicit-str-concat
    "PERF", # Perlint
    "PGH",  # pygrep-hooks
    "PIE",  # flake8-pie
    "PL",   # Pylint
    "PT",   # flake8-pytest-style
    "PTH",  # flake8-use-pathlib
    "PYI",  # flake8-pyi
    "Q",    # flake8-quotes
    "RET",  # flake8-return
    "RSE",  # flake8-raise
    "RSE",  # flake8-raise
    "RUF",  # ruff
    "S",    # flake8-bandit
    "SIM",  # flake8-simplify
    "SLF",  # flake8-self
    "T10",  # flake8-debugger
    "T20",  # flake8-print
    "TCH",  # flake8-type-checking
    "TID",  # flake8-tidy-imports
    "UP",   # pyupgrade
    "W",    # pycodestyle-warnings
    "YTT",  # flake8-2020
]

ignore = [
    "B904",    # raise-without-from-inside-except
    "C4",      # flake8-comprehensions
    "E501",    # line-too-long
    "EXE",     # flake8-executable
    "FA",      # flake8-future-annotations
    "ICN",     # flake8-import-conventions
    "INP",     # flake78-no-pep420
    "ISC",     # flake8-implicit-str-concat
    "PIE",     # flake8-pie
    "PLR0913", # too-many-arguments
    "PLR0915", # too-many-statements
    "PLR2004", # magic-value-comparison
    "PT004",   # pytest-missing-fixture-name-underscore
    "PT019",   # pytest-fixture-param-without-value
    "RET506",  # superfluous-else-raise
    "RUF012",  # mutable-class-default
    "S101",    # use-of-assert-detected
    "S106",    # hardcoded-password-func-arg
    "SIM105",  # suppressible-exception
    "T10",     # flake8-debugger
    "T20",     # flake8-print
]

# Exclude a variety of commonly ignored directories.
exclude = [
    "__pycache",
    "migrations",
    "settings",
    ".coverage",
    ".direnv",
    ".mypy_cache",
    ".pytype",
    ".pdbrc",
    ".pytest_cache",
    ".ruff_cache",
    ".tox",
    ".venv",
    ".git",
    ".gitignore",
    "poetry.lock",
    "site-packages",
    "tmp",
    "Dockerfile",
    "docker-compose.yml",
    "gitlab-ci.yml",
    "tests/test_migrations.py",
]

line-length = 120

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.11
target-version = "py311"

[tool.ruff.mccabe]
max-complexity = 20

[tool.ruff.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.per-file-ignores]
"__init__.py" = ["E402"]

[tool.ruff.isort]
combine-as-imports = true
force-wrap-aliases = true
known-first-party = ["app", "tests"]
